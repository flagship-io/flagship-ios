## Installation

You will find all instructions in [installation](https://dash.readme.com/project/flagship/v1.0/docs/installation) topic

## Flagship Usage

### Start SDK

The first call you should make is to start the SDK by calling `start` method through the Flagship singleton.

```groovy Start Flagshiswp SDK
import Flagship

// Step 1 - Start the Flagship sdk with default configuration.
Flagship.sharedInstance.start(envId: "_ENV_ID_", apiKey: "_API_KEY_")
        
```

In _ step 1_ The SDK needs to start the `environmentId` and `apiKey`. By default the Flagship start with `Decision Mode` for more details on custom configuration go to [Advanced Configuration](https://docs.developers.flagship.io/docs/ios-v33x#advanced-configuration).

> ðŸ“˜ API Key & Environment ID required
> 
> _You can find your apiKey and your environmentId on your Flagship account, in Parameters > Environment & Security._

### Create Visitor

The second step after starting  the SDK is [visitor](https://dash.readme.com/project/flagship/v1.0/docs/visitor) creation. This object allows you to manage visitor's context, experiments, and track events.

```groovy Create Visitor
// Step 2 - Create visitor with context "isVip" : true
let visitor = Flagship.sharedInstance.newVisitor(visitorId: "visitorId", hasConsented: true)
              .withContext(context: ["isVip": true])
              .build()

```

In _Step 2_ We create a visitor providing his [consent](#managing-visitor-consent) and his [context](#context). Go to[ builder methods](#visitor-builder-methods) to learn more about visitor creation.

### Getting flags

Once we have created our visitor instance we need to fetch flags. Go to [Flag](https://dash.readme.com/project/flagship/v1.0/docs/flags) to learn more about.

```groovy Fetch Flags
// Step 3 - Fetch flags
visitor.fetchFlags {
  
    // Fetch completed
  
    // Step 4 - Get Flag key
    let flag = visitor.getFlag(key: "flagKey")
                              )
    // Step 5 - Read Flag value
    let value = flag.value(defaultValue: "defaultValue")
}
```

When flag fetching completes in step 3 its inner code block is executed. In step 4, we are ready to process visitor's flags and read their [values](#getting-flags-current-values) in step 5.

Note: SDK will  [report exposition](#report-a-flag-exposition) by default when reading a Flag value.

### Tracking hits

Then sending events tracking will allows you to validate objectives in your campaign reporting.

```groovy Send Tracking
// Step 6 - Send Event
visitor.sendHit(FSEvent(eventCategory: .Action_Tracking, eventAction: "event_action"))
```

> ðŸ“˜ 
> 
> In order to see your events in your campaign reporting you must define objectives kpis beforehand in the campaign configuration. For more details [Set up your KPIs](getting-started-with-flagship#3-set-up-your-kpis).

In _step 6_ Flagship is on charge of sending the _event_action_ event through the function `sendHit`. Go to [tracking](#hit-tracking) for more information.

You should see your hit using [hitStream](https://flagship.zendesk.com/hc/en-us/articles/4679229678748--Verifying-your-hit-setup) feature, then on your campaign [report](https://flagship.zendesk.com/hc/en-us/articles/360014654940-Reporting-A-B-Test).